#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    int ***x, ***y, nl = 3, nc = 4, nm = 5, i, j, k;

    x = (int***)malloc(nm * sizeof(int**));

    x[0] = (int*)malloc(nl * nc * nm * sizeof(int));

    for(i = 1; i < nm; i++)
    {
        x[i] = x[i - 1] + (nl * nc);
    }

    for(k = 0; k < nm; k++)
    {
        x[k] = (int**)malloc(nl * sizeof(int));
    }

    for(k = 0; k < nm; k++)
    {
        x[k][0] = (int*)malloc(nl * nc * sizeof(int));
    }

    for(k = 0; k < nm; k++)
    {
        for(i = 1; i < nl; i++)
        {
            x[k][i] = x[k][i - 1] + nc;
        }
    }

    for(k = 0; k < nm; k++)
    {
        for(i = 0; i < nl; i++)
        {
            for(j = 0; j < nc; j++)
            {
                x[k][i][j] =  i + j + k + 1;
            }
        }
    }

    for(k = 0; k < nm; k++)
    {
        for(i = 0; i < nl; i++)
        {
            for(j = 0; j < nc; j++)
            {
                printf(" %i", x[k][i][j]);
            }
            printf("\n");
        }
        printf("\n");
    }

    printf("-------------------------------------------------------------------\n");


    y = (int***)malloc(nm * sizeof(int**));

    y[0] = (int*)malloc(nl * nc * nm * sizeof(int));

    for(i = 1; i < nm; i++)
    {
        y[i] = y[i - 1] + (nl * nc);
    }

    for(k = 0; k < nm; k++)
    {
        y[k] = (int**)malloc(nl * sizeof(int));
    }

    for(k = 0; k < nm; k++)
    {
        y[k][0] = (int*)malloc(nl * nc * sizeof(int));
    }

    for(k = 0; k < nm; k++)
    {
        for(i = 1; i < nl; i++)
        {
            y[k][i] = y[k][i - 1] + nc;
        }
    }

    printf("\n-------------------------------------------------------------------\n\n");

    memcpy( y, x ,(nl*nc*nm*sizeof(int)) );

    for(k = 0; k < nm; k++)
    {
        for(i = 0; i < nl; i++)
        {
            for(j = 0; j < nc; j++)
            {
                printf(" %i", y[k][i][j]);
            }
            printf("\n");
        }
        printf("\n");
    }

    return 0;
}
